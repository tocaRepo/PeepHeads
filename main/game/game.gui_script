local monarch = require "monarch.monarch"
local druid = require("druid.druid")
local CrisisDB = require "main.modules.crisisdb"
local timer = require("druid.extended.timer")  -- Register the extended timer component

-- Local constants
local WORD_LIMIT = 15
local TIMER_DURATION = 60

-- Forward declare variables
local words

-- Callback functions
local function display_next_word(self)
    if words and #words > 0 and self.word_counter+1 <= #words then
        self.word_counter = self.word_counter + 1
        self.text_component:set_to(words[self.word_counter].data.word)
        
    else 
        
        self.text_component:set_to("Score: " .. self.score)
        self.correct_words_text = self.druid:new_text("correct_words")
        self.correct_words_text:set_to(self.correct_words)
        gui.set_enabled(gui.get_node("correct_words"), true)

        self.wrong_words_text = self.druid:new_text("wrong_words")
        self.wrong_words_text:set_to(self.wrong_words)
        gui.set_enabled(gui.get_node("wrong_words"), true)
        -- Hide and disable the buttons using Druid
        gui.set_enabled(gui.get_node("wrong"), false)
        gui.set_enabled(gui.get_node("correct"), false)

        print("Stopping timer...")
        self.timer_component:set_state(false)
        print("Disabling timer and hiding it...")
        gui.set_enabled(gui.get_node("timer"), false)
     
    end
end

local function on_wrong_button_click(self)
    print("WRONG")
    if self.wrong_words_formatting == 0 then
        self.wrong_words = self.wrong_words .. words[self.word_counter].data.word .. ", "
        self.wrong_words_formatting=1
    else
        self.wrong_words = self.wrong_words .. words[self.word_counter].data.word .. "\n"
        self.wrong_words_formatting=0
    end
    display_next_word(self)
end
local function on_exit_button_click(self)
    print("exit")
    monarch.show(hash("menu"))
    monarch.unload(hash("game"))
end
local function on_correct_button_click(self)
    print("CORRECT")

    if self.correct_words_formatting == 0 then
        self.correct_words = self.correct_words .. words[self.word_counter].data.word .. ", "
        self.correct_words_formatting=1
    else
        self.correct_words = self.correct_words .. words[self.word_counter].data.word .. "\n"
        self.correct_words_formatting=0
    end
    print(words[self.word_counter].data.word)
    self.score = self.score + 1
    display_next_word(self)
   
end

local function on_tick(_, value)
    -- Update the timer node with the remaining time in seconds
    local timer_node = gui.get_node("timer")
    gui.set_text(timer_node, tostring(math.floor(value)))
end

local function on_timer_end(self)
    print("Time's up!")
    self.text_component:set_to("Score: " .. self.score)
    self.correct_words_text = self.druid:new_text("correct_words")
    self.correct_words_text:set_to(self.correct_words)
    gui.set_enabled(gui.get_node("correct_words"), true)

    self.wrong_words_text = self.druid:new_text("wrong_words")
    self.wrong_words_text:set_to(self.wrong_words)
    gui.set_enabled(gui.get_node("wrong_words"), true)
    -- Hide and disable the buttons using Druid
    gui.set_enabled(gui.get_node("wrong"), false)
    gui.set_enabled(gui.get_node("correct"), false)

    print("Stopping timer...")
    self.timer_component:set_state(false)
    print("Disabling timer and hiding it...")
    gui.set_enabled(gui.get_node("timer"), false)
   
end

-- Utility function to load 10 random words from the database
local function load_words()


    -- Load or retrieve data
    CrisisDB.init("/assets/data/")
    local data = CrisisDB.fetch_random_elements("words.json",WORD_LIMIT)

    if data then
        print("Data loaded:", json.encode(data))
        print(data.rows[2].data.word)
        words = data.rows
        
    else
        print("No data found, starting fresh.")
    end

   
    -- Fetch 10 random words from the database
    
   
end

-- Initialization
function init(self)
    print("Game init")
    msg.post(".", "acquire_input_focus")

    -- Initialize game state
    self.word_counter = 1
    self.score = 0
    self.correct_words=""
    self.correct_words_formatting=0
    self.wrong_words=""
    self.wrong_words_formatting=0
    -- Load words from the database
    load_words()

    -- Initialize Druid and register the timer component
    self.druid = druid.new(self)
    druid.register("timer", timer)

    -- Initialize buttons
    self.button_wrong = self.druid:new_button("wrong", function() on_wrong_button_click(self) end)   
    self.button_correct = self.druid:new_button("correct", function() on_correct_button_click(self) end)
    self.button_exit = self.druid:new_button("exit", function() on_exit_button_click(self) end)
    
    -- Set the first word in the GUI text node
    self.text_component = self.druid:new_text("word")
    self.text_component:set_to(words[self.word_counter].data.word)

    -- Initialize the timer
    local timer_node = gui.get_node("timer")
    self.timer_component = self.druid:new_timer(timer_node, TIMER_DURATION, 0, function() on_timer_end(self) end)

    -- Immediately set the timer to the initial value
    gui.set_text(timer_node, tostring(TIMER_DURATION))

    -- Subscribe to the on_tick event to update the timer every second
    self.timer_component.on_tick:subscribe(on_tick)

    -- Start the timer
    self.timer_component:set_state(true)
end

-- Update function called every frame
function update(self, dt)
    self.druid:update(dt)
end

-- Cleanup function called when the script is finalized
function final(self)
    self.druid:final()
end

-- Handle messages
function on_message(self, message_id, message, sender)
    self.druid:on_message(message_id, message, sender)
end

-- Handle input actions
function on_input(self, action_id, action)
    return self.druid:on_input(action_id, action)
end
